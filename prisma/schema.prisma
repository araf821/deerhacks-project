// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  imageUrl           String
  email              String                @unique
  password           String
  school             String
  bio                String?
  socialLinks        Social[]
  courses            StudentCourseStatus[]
  currentAvailStatus Status?
  reviewsGiven       Review[]              @relation("studentRelation")
  reviews            Review[]              @relation("teacherRelation")
}

enum USER_AVAILABILITY_TYPE {
  // LOOKING_FOR_STUDY_GROUP_ONLINE
  LOOKING_FOR_STUDY_GROUP_IRL
  AVAILABLE_TO_HELP_IRL
  AVAILABLE_TO_HELP_ONLINE
  LOOKING_FOR_HELP_IRL
  LOOKING_FOR_HELP_ONLINE
}

model Status {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  userAvaibilityType USER_AVAILABILITY_TYPE
  msg                String?
  userId             String                 @unique @db.ObjectId
  courseIDs          String[]               @db.ObjectId
  courses            Course[]               @relation(fields: [courseIDs], references: [id])

  user User @relation(fields: [userId], references: [id])
}

model Social {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  label  String
  link   String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

enum COMPLETION_STATUS {
  ONGOING
  COMPLETED
}

enum GRADE {
  A
  B
  C
  D
  F
}

enum STUDENT_TYPE {
  TEACHER
  LEARNER
  NEITHER
}

model StudentCourseStatus {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  completionStatus COMPLETION_STATUS
  grade            GRADE?
  type             STUDENT_TYPE      @default(LEARNER)
  course           Course            @relation(fields: [courseId], references: [id])
  student          User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
  courseId         String            @db.ObjectId
}

model Course {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  school               String
  name                 String
  courseCode           String                @unique
  StudentCourseStatus  StudentCourseStatus[]
  statusIDs            String[]              @db.ObjectId
  statuses             Status[]              @relation(fields: [statusIDs], references: [id])
  studySessionRequests StudySessionRequest[]
  reviewIDs            String[]              @db.ObjectId
  reviews              Review[]              @relation(fields: [reviewIDs], references: [id], "reviews")
}

enum LOCATION {
  DB
  MN
  KN
  HM
}

model StudySessionRequest {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  requestById     String   @db.ObjectId
  requestForId    String   @db.ObjectId
  requestLocation LOCATION
  course          Course   @relation(fields: [courseId], references: [id])
  courseId        String   @db.ObjectId
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  student    User     @relation(fields: [studentId], references: [id], name: "studentRelation")
  teacher    User     @relation(fields: [teacherId], references: [id], name: "teacherRelation")
  reviewText String
  ratingNum  Int
  courses    Course[] @relation(fields: [courseIDs], references: [id], "reviews")
  courseIDs  String[] @db.ObjectId
  teacherId  String   @db.ObjectId
  studentId  String   @db.ObjectId

  @@unique(name: "studentAndTeacher", [studentId, teacherId])
}
